snippet #!
	#!/usr/bin/env python
	# -*- coding: UTF-8 -*-
snippet all
	__all__ = ['${1}', '${2}']
snippet imp
	import ${1:module}
snippet fimp
	from ${1:module} import ${2:class1}, ${3:class2}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet param
	:param ${1:name}: ${2:description}
	:type $1: ${3:type}
# doctest
snippet doctest
	"""Doctest for ${1:func}.
	>>> ${2:run}
	${3:value}
	>>> ${4:run}
	${5:value}
	>>> ${6:run}
	${7:value}
	"""
snippet test
	class ${1:Class}Test(unittest.TestCase):
		def setUp(self):
			self.${2:value} = $2

		def tearDown(self):
			pass
snippet teste
	def test_${1:method}(self):
		self.assertEqual(${2:value1}, ${3:value2})
snippet testt
	def test_${1:method}(self):
		self.assertTrue(${2:value1})
snippet testr:
	def test_${1:method}(self):
		with self.assertRaises(${2:ValueError}):
			${3:boom}
snippet wh
	while ${1:condition}:
		${2:# code...}
# dowh - does the same as do...while in other languages
snippet dowh
	while True:
		${1:# code...}
		if ${2:condition}:
			break
snippet with
	with ${1:expr} as ${2:var}:
		${3:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
snippet lcfor
	[${1:var} for $1 in ${2:list}]
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
# python debugger (pdb)
snippet pdb
	import pdb; pdb.set_trace()
# ipython debugger (ipdb)
snippet ipdb
	import ipdb; ipdb.set_trace()
# ipython debugger (pdbbb)
snippet pdbbb
	import pdbpp; pdbpp.set_trace()
# BSD
snippet bsd
	"""
	Copyright (c) `strftime("%Y")` ${1:Author}.
	All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

		1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

		2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

		3. Neither the name of the Sentry nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	"""
# GPL
snippet gpl
	# ${1:Name}
	# Copyright (C) `strftime("%Y")` ${2:Author}
	#
	# This program is free software: you can redistribute it and/or modify
	# it under the terms of the GNU General Public License as published by
	# the Free Software Foundation, either version 3 of the License, or
	# (at your option) any later version.
	#
	# This program is distributed in the hope that it will be useful,
	# but WITHOUT ANY WARRANTY; without even the implied warranty of
	# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	# GNU General Public License for more details.
	#
	# You should have received a copy of the GNU General Public License
	# along with this program.  If not, see <http://www.gnu.org/licenses/>.
	
	${3:#code}
# setup.py
snippet snsetup
	from setuptools import setup, find_packages
	
	install_requires = [
		'${1:package}>=${2:1.0}',
	]

	setup(
		name='${3:name}',
		version='${4:version}',
		description='${5:description}',
		author='${6:author}',
		author_email='${7:email}',
		url='${8:http}',
		license='BSD',
		package_dir={'': 'src'},
		packages=find_packages('src'),
		zip_safe=False,
		install_requires=install_requires,
		include_package_data=True,
		classifiers=[
			'Intented Audience :: Developers',
			'Intented Audience :: System Administrators',
			'Operating System :: OS Independent',
			'Topic :: Software Development'
			# http://pypi.python.org/pypi?:action=list_classifiers
		]
	)
# thread
snippet snthread
	import threading

	class ${1:MyThread}(threading.Thread):
	    """${2:My thread doc}."""

		def __init__(self, queue):
			threading.Thread.__init__(self)
			self.queue = queue

		def run(self):
			while True:
				task = self.queue.get()
				${3:do_something()}
				self.queue.task_done()
snippet snqueue
	import Queue
	queue = Queue.Queue()

	queue.put(${1})
snippet sns
	'%s' % (${1},)
snippet snnt
	${1:Point} = namedtuple('{2:Point}', ['{3:x}', '{4:y}']
snippet snargparse
	import argparse
	${1:parser} = argparse.ArgumentParser()
	$1.parse_args()
snippet snaddarg
	${1:parser}.add_argument('${2:name}', type=${3:type},
		help='${4:help_text}')
snippet sndocopt
	"""${1:ScriptName}.

	Usage:
	  ${2:filename}.py action (${3:choicex}|${4:choicey}) <x> <y>
	
	Options:
	  -h --help    			${5:Show help}
	  --version    			Show version
	  --speed=<speed>       ${6:speed}
	"""

	if __name__ == '__main__':
	    from docopt import docopt
	    ${7:args} = docopt(__doc__, version='${8:version}')
